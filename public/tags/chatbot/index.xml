<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Chatbot on TokenBrice</title>
        <link>http://localhost:1313/tags/chatbot/</link>
        <description>Recent content in Chatbot on TokenBrice</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Thu, 23 Nov 2017 13:21:53 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/chatbot/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>How To Build A Cryptobot In Python Able To Fetch Data From External APIs</title>
        <link>http://localhost:1313/p/how-to-build-a-cryptobot-in-python-able-to-fetch-data-from-external-apis/</link>
        <pubDate>Thu, 23 Nov 2017 13:21:53 +0000</pubDate>
        
        <guid>http://localhost:1313/p/how-to-build-a-cryptobot-in-python-able-to-fetch-data-from-external-apis/</guid>
        <description>&lt;img src="http://localhost:1313/img/2017/sato/satodemo.gif" alt="Featured image of post How To Build A Cryptobot In Python Able To Fetch Data From External APIs" /&gt;&lt;p&gt;Chatbots have an incredible  potential. Yet, for bots to be efficient, they must integrate and  exchange data with existing services and processes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The ability to fetch data from external API allows for more complex use case that a simple Q and A logic&lt;/strong&gt;. Moreover, this ability combined with NLP offers even more opportunities.&lt;/p&gt;
&lt;p&gt;For instance, Sato – the cryptobot we’ll be building today, is able to recognize all  cryptocurrencies, even those not even listed yet. I won’t have to do anything for him to be able to process queries on  crypto appearing even years from now, because Sato, deep-down,  understood what a cryptocurrency symbol is  (after being fed with thousands of them).&lt;/p&gt;
&lt;h2 id=&#34;what-are-we-building-today&#34;&gt;&lt;strong&gt;WHAT ARE WE BUILDING TODAY?&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;By the end of this tutorial, we  will have a bot able to fetch data from a third party API depending on  what our users input, and reply to them with the value fetched. Here’s  the end-result of what we’ll build today: a cryptobot aka a chatbot able to fetch any cryptocurrency price.&lt;/p&gt;
&lt;p&gt;What you’ll have by the end of this tutorial&lt;/p&gt;
&lt;p&gt;In a rush? Here is all you need to build your own:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cai.tools.sap/ahirice/sato-cryptobot/train/?utm_source=blog&amp;amp;utm_campaign=sato&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The bot on SAP Conversational AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Ahirice/sato/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The GitHub repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Need to see it to believe it? That’s wise!&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.messenger.com/t/satofolio&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/messenger-button-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;chat-on-messenger&#34;
	
	
&gt;&lt;/a&gt;Or if you would rather understand how it was made, go through with the tutorial.&lt;/p&gt;
&lt;h2 id=&#34;i-build-the-base-of-your-bot-choose-your-path&#34;&gt;&lt;strong&gt;I/ BUILD THE BASE OF YOUR BOT: CHOOSE YOUR PATH&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;The goal today is to build bot able to recognize a question about pricing on any cryptocurrency. Let your imagination flow, &lt;strong&gt;it could be really anything there is involving data available on third party APIs&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Before we dive in the tutorial, let me give you some information on how Sato works.&lt;/p&gt;
&lt;h3 id=&#34;meet-sato-the-cryptobot&#34;&gt;&lt;strong&gt;MEET SATO, THE CRYPTOBOT&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Sato is a bot made to answer basic questions about cryptocurrencies and fetch their prices. Here’s an  overview of what he can do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fecth cryptocurrencies prices  (what we’ll build today): Sato recognizes cryptocurrencies symbol  (“ETH”, “BTC”) and fetch their price on &lt;a class=&#34;link&#34; href=&#34;https://www.cryptocompare.com/api/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cryptocompare API&lt;/a&gt; to finally return BTC and USD value to the user.&lt;/li&gt;
&lt;li&gt;Answer the users’ questions about wallets – online wallets, exchange wallets, cold wallets and hardware wallets.&lt;/li&gt;
&lt;li&gt;Address questions about private and public keys as well as the security of cryptocurrencies.&lt;/li&gt;
&lt;li&gt;Briefly present the main cryptocurrencies, currently BTC, ETH, BCH and LTC.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;inside-sato-cryptobot&#34;&gt;&lt;strong&gt;INSIDE SATO, CRYPTOBOT&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Today, we’ll focus on the skill fetching the crypto prices, as it requires an external API call. Essentially, Sato needs three things to be able to detect a question about crypto price and return the value asked:&lt;/p&gt;
&lt;p&gt;Firstly, he needs an intent &lt;a class=&#34;link&#34; href=&#34;https://cai.tools.sap/ahirice/sato-cryptobot/train/crypto_price?utm_source=blog&amp;amp;utm_campaign=sato&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;(@crypto_price&lt;/a&gt;) with diverse expressions and cryptocurrencies mentioned, so he can  efficiently recognize these questions. Here are some of the expressions  used to define the @crypto_price intent:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/i-crypto-price.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;cryptobot @crypto_price expressions&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;A sample of the expressions used to define the @crypto_price intent&lt;/p&gt;
&lt;p&gt;Secondly, for Sato to be able to recognize all cryptocurrencies, he’ll need the biggest list you can find. I found 1200+ on CoinMarketCap which is good enough to begin with. I created a gazette of the crypto names to improve its understanding.&lt;/p&gt;
&lt;p&gt;Thirdly, we’ll need to build a skill which triggers when the @ask_price intent or #crypto_name entity is recognized:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/skill1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;cryptobot - triggers&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Sato – Cryptobot / crypto_main skill triggers&lt;/p&gt;
&lt;p&gt;You can also add #crypto_name as a requirements, to make sure no API called is fired without parameters:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mk0caiblog1h3pefaf7c.kinstacdn.com/wp-content/uploads/2017/11/cryptomissing.png&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/cryptomissing.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Sato - Cryptobot / crypto_main skill requirements&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sato – Cryptobot / crypto_main skill requirements&lt;/p&gt;
&lt;p&gt;This skill must also call your webhook that we’ll setup below:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mk0caiblog1h3pefaf7c.kinstacdn.com/wp-content/uploads/2017/11/webhookcryotio.png&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/webhookcryotio.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Sato - Cryptobot / crypto_main skill actions&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sato – Cryptobot / crypto_main skill actions&lt;/p&gt;
&lt;p&gt;Don’t forget to add a memory reset after the webhook trigger, it’s required to clean the memory after each answer.&lt;/p&gt;
&lt;p&gt;Finally, we’ll test our bot  straight in Messenger, so you’ll need to create a page and an app and  connect it. Everything is documented in the &lt;code&gt;CONNECT&lt;/code&gt; tab and in &lt;a class=&#34;link&#34; href=&#34;https://cai.tools.sap/blog/build-your-first-bot-with-sap-conversational-ai/?utm_source=blog&amp;amp;utm_campaign=sato&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;the getting started tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To keep it concise**, this tutorial will not detail the creation of a bot**. We’ll start from a functioning bot already.&lt;/p&gt;
&lt;p&gt;To meet me there, you have two options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Option A: build your own bot (who doesn’t have to be a cryptobot)&lt;/li&gt;
&lt;li&gt;Option B: fork Sato and start from here.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You’ll also need&lt;a class=&#34;link&#34; href=&#34;https://cai.tools.sap/signup/?utm_source=blog&amp;amp;utm_campaign=sato&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt; an account on SAP Conversational AI&lt;/a&gt; to complete this tutorial.&lt;/p&gt;
&lt;h3 id=&#34;a-build-your-own-bot&#34;&gt;&lt;strong&gt;A/ BUILD YOUR OWN BOT&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Nathan wrote an exhaustive tutorial on &lt;a class=&#34;link&#34; href=&#34;https://cai.tools.sap/blog/build-your-first-bot-with-sap-conversational-ai/?utm_source=blog&amp;amp;utm_campaign=sato&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;how to build your first bot with SAP Conversational AI&lt;/a&gt; so I’ll leave the basics to him. Feel free to &lt;a class=&#34;link&#34; href=&#34;https://slack.cai.tools.sap/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;reach our to our community on Slack&lt;/a&gt; if you need some help.&lt;/p&gt;
&lt;h3 id=&#34;b-fork-the-bot-used-in-this-tutorial&#34;&gt;&lt;strong&gt;B/ FORK THE BOT USED IN THIS TUTORIAL&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;SAP Conversational AI is &lt;strong&gt;collaborative bot platform&lt;/strong&gt;, it works pretty much like GitHub. Which means you can &lt;a class=&#34;link&#34; href=&#34;https://cai.tools.sap/ahirice/sato-cryptobot/?utm_source=blog&amp;amp;utm_campaign=sato&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;simply fork my bot Sato&lt;/a&gt; and start from here. Here’s how:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mk0caiblog1h3pefaf7c.kinstacdn.com/wp-content/uploads/2017/11/Recast-AI-ahirice-sato-cryptobot.png&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/Recast-AI-ahirice-sato-cryptobot-1024x158.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Forking a bot on SAP Conversational AI&lt;/p&gt;
&lt;h2 id=&#34;ii-basic-server-code-and-requirements&#34;&gt;&lt;strong&gt;II/ BASIC SERVER CODE AND REQUIREMENTS&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;Since we want to interact with our bot, we’ll need a server to be able to receive the results of the NLP made by SAP Conversational AI and send our responses back.&lt;/p&gt;
&lt;p&gt;On the &lt;a class=&#34;link&#34; href=&#34;https://cai.tools.sap&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;bot builder&lt;/a&gt;, go to the &lt;code&gt;CODE&lt;/code&gt; tab to find an example of base code required to start your API. We give examples in Node.JS, PHP, Python and Ruby. This tutorial will be Python only.&lt;/p&gt;
&lt;p&gt;Here’s the base code for Python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flask&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Flask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Flask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;5000&amp;#39;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;replies&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s1&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s1&#34;&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Roger that&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/errors&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;errors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Take some time to look at the code to get a better understanding of what we’ll be doing: &lt;strong&gt;we’ll build on this code during this tutorial&lt;/strong&gt;. You can save it in your favorite text editor for now.&lt;/p&gt;
&lt;h3 id=&#34;requirements&#34;&gt;&lt;strong&gt;REQUIREMENTS&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;As you can see, the server script uses the &lt;a class=&#34;link&#34; href=&#34;http://flask.pocoo.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Flask as a web framework&lt;/a&gt;, so we’ll need it.&lt;/p&gt;
&lt;p&gt;For the API call, we’ll also use &lt;a class=&#34;link&#34; href=&#34;http://docs.python-requests.org/en/master/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Requests&lt;/a&gt;. Let’s go ahead and install both:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install Flask
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install requests
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;iii-test-the-server-ngrok&#34;&gt;&lt;strong&gt;III/ TEST THE SERVER: NGROK&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;Now that we have the base server,  let’s make it run and test it. It will allow us to be more incremental  in the process so the debugging (if any) is simplified.&lt;/p&gt;
&lt;p&gt;To expose our local server to the internet, we’ll need ngrok.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: If you are using Windows like me, there is awesome package manager – &lt;a class=&#34;link&#34; href=&#34;https://chocolatey.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Chocolatey&lt;/a&gt; which works pretty much like apt-get on UNIX. With it, you’ll be able to install ngrok in one line &lt;code&gt;choco install ngrok_portable&lt;/code&gt;. Moreover, Chocolatey adds ngrok to your PATH, allowing you to start ngrok from any terminal simply by typing &lt;code&gt;ngrok&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now is the time to start our server and test it, this implies:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set a webhook trigger in your bot (detailed in step 1)&lt;/li&gt;
&lt;li&gt;Run your python script,&lt;/li&gt;
&lt;li&gt;Expose port 5000 to the internet with ngrok: &lt;code&gt;ngrok http 5000&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Copy the forwarding URL form ngrok and past it as your bot base URL on SAP Conversational AI&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;iv-preparing-the-external-api-call&#34;&gt;&lt;strong&gt;IV/ PREPARING THE EXTERNAL API CALL&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;It’s about time to start building! Let’s have a look at the api call we’ll be doing to get the price of  any cryptocurrency. Several APIs are available for this purpose so I  just went ahead and picked one: &lt;a class=&#34;link&#34; href=&#34;https://www.cryptocompare.com/api/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cryptocompare API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cryptocompare.com/api/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cryptocompare API&lt;/a&gt; offers thousands of possibilities, but for the sake of simplicity, we’ll stick with the basics. &lt;strong&gt;We want the price of the matched crypto in BTC, USD and EUR&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here’s how the call is structured(here for ETH):&lt;code&gt;https://min-api.cryptocompare.com/data/price?fsym=&amp;quot;ETH&amp;quot;&amp;amp;tsyms=BTC,USD,EUR&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You have two parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fsym&lt;/code&gt;: the symbol of the cryptocurrency, this is where we’ll need to fetch the crypto_name recognized in the #crypto_name entity.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tsyms&lt;/code&gt;: the currency in which the price will be returned. We chose BTC, USD and EUR here.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, in our case, we’ll only need to adapt the &lt;code&gt;fsym&lt;/code&gt; parameter to the recognized cryptocurrency, while the rest of the call stays the same.&lt;/p&gt;
&lt;h2 id=&#34;v-adapt-the-api-call-to-include-the-symbol-recognized-in-the-user-input&#34;&gt;&lt;strong&gt;V/ ADAPT THE API CALL TO INCLUDE THE SYMBOL RECOGNIZED IN THE USER INPUT&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;Now that we know how to fetch the prices, we need to go back to our server code and upgrade it so it can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Know the #crypto_name recognized by SAP Conversational AI.&lt;/li&gt;
&lt;li&gt;Make an API call to Cryptocompare using the #crypto_name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s get started!&lt;/p&gt;
&lt;h3 id=&#34;a-finding-our-data-in-sap-conversational-ai-json&#34;&gt;&lt;strong&gt;A/ FINDING OUR DATA IN SAP Conversational AI JSON&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Let’s have a look at the data returned by SAP Conversational AI on a user input. To do so, you click the &lt;code&gt;CHAT WITH YOUR BOT&lt;/code&gt; button present on all pages, on the bottom-right corner. Then, you can  switch between the conversation and the JSON view by clicking on the  orange information circle as below:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mk0caiblog1h3pefaf7c.kinstacdn.com/wp-content/uploads/2017/11/priceOMG.png&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/priceOMG.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Check the JSON of the conversation.&lt;/p&gt;
&lt;p&gt;Here, our symbol is accessible with &lt;code&gt;[&#39;conversation&#39;][&#39;memory&#39;][&#39;crypto&#39;][&#39;raw&#39;]&lt;/code&gt;. Since the value and the raw and identical in this case, you can use either.&lt;/p&gt;
&lt;p&gt;On our server, the JSON returned by the website test panel is &lt;strong&gt;encapsulated into the &lt;code&gt;data&lt;/code&gt; dictionary&lt;/strong&gt; (see server code). So we need an extra step to retrieve it on our server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# FETCH THE CRYPTO NAME
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;crypto_name = data[&amp;#39;conversation&amp;#39;][&amp;#39;memory&amp;#39;][&amp;#39;crypto&amp;#39;][&amp;#39;value&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;b-make-an-api-call-using-the-recognized-entity&#34;&gt;&lt;strong&gt;B/ MAKE AN API CALL USING THE RECOGNIZED ENTITY&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;For the API call, we’ll be using  Requests. Don’t forget to import it in your server’s script, then, we  build our base request (r):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import requests
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;r = requests.get(&amp;#34;https://min-api.cryptocompare.com/data/price?fsym=&amp;#34;+crypto_name+&amp;#34;&amp;amp;tsyms=BTC,USD,EUR&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Go ahead and print it, but you may be disappointed:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/r.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;cryptobot - cryptocompare API response&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Indeed, if you want to get the values returned by the call, you need to print &lt;code&gt;r.json()&lt;/code&gt;. The good news is that JSON returned by Cryptocompare is really as simple as it could be:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/cryptocompare-json.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;cryptobot - JSON from cryptocompare API&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Cryptocompare JSON&lt;/p&gt;
&lt;p&gt;Great! Now, we just have one last step to figure out: returning the prices to the user.&lt;/p&gt;
&lt;h2 id=&#34;vi-returning-the-data-fetched-to-the-user&#34;&gt;&lt;strong&gt;VI/ RETURNING THE DATA FETCHED TO THE USER&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;Now, it’s time to finish our base  server code upgrade: we need to edit the replies returned to include our freshly fetched data. To do so, we’ll edit the message returned by our  server code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;return jsonify( 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    status=200, 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    replies=[{ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &amp;#39;type&amp;#39;: &amp;#39;text&amp;#39;, 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &amp;#39;content&amp;#39;: &amp;#39;Roger that&amp;#39;, 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }],
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;We’ll be editing the replies only, to include the prices we fetched:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   replies=[{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &amp;#39;type&amp;#39;: &amp;#39;text&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &amp;#39;content&amp;#39;: &amp;#39;The price of %s is %f BTC and %f USD&amp;#39; % (crypto_name, r.json()[&amp;#39;BTC&amp;#39;], r.json()[&amp;#39;USD&amp;#39;])
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }],
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Since the reply is a string, we must use the modulo (%) operator to  include our prices in the string. Here, the first %s tells Python to  look for a string while the two following %f indicates floats.&lt;/p&gt;
&lt;p&gt;Our upgraded server is now finished, here’s the whole code :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flask&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Flask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Flask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;5000&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# FETCH THE CRYPTO NAME&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;crypto_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;conversation&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;memory&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;crypto&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;raw&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# FETCH BTC/USD/EUR PRICES&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://min-api.cryptocompare.com/data/price?fsym=&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crypto_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;amp;tsyms=BTC,USD,EUR&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;replies&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s1&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s1&#34;&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;The price of &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%f&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; BTC and &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%f&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; USD&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crypto_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;BTC&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;USD&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/errors&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;errors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;With our new server completed, we now have all the pieces of our puzzle. Let’s assemble it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run your python script,&lt;/li&gt;
&lt;li&gt;Expose port 5000 to the internet with ngrok: &lt;code&gt;ngrok http 5000&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Copy the forwarding URL form ngrok and past it as your bot base URL on SAP Conversational AI&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now that you have the basics to build a bot able to fetch third party data, what’s gonna be? You show us!&lt;/p&gt;
&lt;p&gt;PS: Since this tutorial uses ngrok, your computer must be on and ngrok must be running for your bot to function.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cai.tools.sap/blog/github-repo-heroku/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;If you want to make your bot always available, follow the next tutorial&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How to host a Python server for a SAP Conversational AI bot using Github and Heroku</title>
        <link>http://localhost:1313/p/how-to-host-a-python-server-for-a-sap-conversational-ai-bot-using-github-and-heroku/</link>
        <pubDate>Thu, 23 Nov 2017 13:21:53 +0000</pubDate>
        
        <guid>http://localhost:1313/p/how-to-host-a-python-server-for-a-sap-conversational-ai-bot-using-github-and-heroku/</guid>
        <description>&lt;img src="http://localhost:1313/img/2017/sato/satodemo.gif" alt="Featured image of post How to host a Python server for a SAP Conversational AI bot using Github and Heroku" /&gt;&lt;p&gt;In the previous tutorial, we learnt how to host our own server for our bot, so he would be able to &lt;strong&gt;fetch data from third party APIs&lt;/strong&gt; and return it to its users. Alas, the Python server made in the last tutorial was &lt;strong&gt;self-hosted&lt;/strong&gt;: you had to run it on your own computer, using ngrok to expose one of your ports to the internet.&lt;/p&gt;
&lt;p&gt;If you closed the terminal running the script, or turned off the computer, the server was shut down and  your bot left unable to reply. Hopefully, thanks to services such as &lt;a class=&#34;link&#34; href=&#34;https://www.heroku.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Heroku&lt;/a&gt; it’ easy to get started with servers.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cai.tools.sap/blog/python-cryptobot/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Want to start from the beginning? Check the first tutorial on Sato: How to build a bot able to fetch data from external APIs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;meet-sato-the-cryptobot&#34;&gt;&lt;strong&gt;Meet SATO, the cryptobot&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;Here’s the end-result of what we’ll build today: a cryptobot aka a chatbot able to fetch any cryptocurrency price.&lt;/p&gt;
&lt;p&gt;What you’ll have by the end of this tutorial&lt;/p&gt;
&lt;p&gt;In a rush? Here is all you need to build your own:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cai.tools.sap/ahirice/sato-cryptobot/train/?utm_source=blog&amp;amp;utm_campaign=sato&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The bot on SAP Conversational AI&lt;/a&gt; and&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Ahirice/sato/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;The GitHub repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Need to see it to believe it? That’s wise!&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.messenger.com/t/satofolio&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/messenger-button-1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;chat-on-messenger&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Or if you would rather understand how it was made, go through with the tutorial.&lt;/p&gt;
&lt;h2 id=&#34;what-are-we-building-today&#34;&gt;&lt;strong&gt;What are we building today?&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;Today, we’re taking &lt;strong&gt;the next step to ensure permanent availability of your bot&lt;/strong&gt;. By the end of this tutorial, you’ll have your bot server hosted on &lt;a class=&#34;link&#34; href=&#34;https://www.heroku.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Heroku&lt;/a&gt; and always available, 24/24, 7/7.&lt;/p&gt;
&lt;p&gt;This implies some extra steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hosting your code on a Github repo&lt;/li&gt;
&lt;li&gt;Modifying our server code for Heroku&lt;/li&gt;
&lt;li&gt;Adding extra files to match Heroku’s requirements&lt;/li&gt;
&lt;li&gt;Connecting the Github repo and the Heroku app&lt;/li&gt;
&lt;li&gt;Test and debug&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.heroku.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Heroku&lt;/a&gt; is nicely integrated with &lt;a class=&#34;link&#34; href=&#34;https://github.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt; so this is where the code will be hosted.&lt;/p&gt;
&lt;h3 id=&#34;i-github&#34;&gt;&lt;strong&gt;I/ GITHUB&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;This section will focus on using GitHub Bash/CLI (Command Line Interface) to host our code. &lt;strong&gt;You can skip this step all together using the visual interface&lt;/strong&gt; on &lt;a class=&#34;link&#34; href=&#34;https://www.github.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub website&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;1-git-in-three-lines&#34;&gt;&lt;strong&gt;1. GIT IN THREE LINES&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;Github has two major interest for developers: first, it tremendously &lt;strong&gt;facilitates collaboration&lt;/strong&gt;. Secondly, it smoothly handles &lt;strong&gt;file versioning.&lt;/strong&gt; Even if these two advantages may seem remote to you for now, it’s worth it to learn good habits right from the start: GitHub is now a standard.&lt;/p&gt;
&lt;h4 id=&#34;2-getting-gitbash&#34;&gt;&lt;strong&gt;2. GETTING GITBASH&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/download/win&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;You can get Git Bash from here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: In the first tutorial, I mentioned about using &lt;a class=&#34;link&#34; href=&#34;https://chocolatey.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Chocolatey&lt;/a&gt; on Windows for package management. If you did so, you can install Git simply by inputting &lt;code&gt;choco install git&lt;/code&gt; in a terminal.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Not only will it  install Git, but it will also add it to your system’s path, allowing you to call Git from any terminal. Unlike Ngrok, the Git installer can also add Git to your system path so here choosing between the two  installation methods is a matter of preferences.&lt;/p&gt;
&lt;h4 id=&#34;3-identification-global&#34;&gt;&lt;strong&gt;3. IDENTIFICATION (GLOBAL)&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;Before we starting manipulating  files with Git, we’ll need to set up our email and username. They can be set at a global level or at a directory level. For the sake of  simplicity, we’ll set them at a the global level:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global user.email &amp;#34;email@example.com&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global user.name &amp;#34;bobby&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;You can confirm both by using the same command without any value:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/gitconfigconfirm.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;github repo - git user config&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Verifying username config on GitHub CLI&lt;/p&gt;
&lt;h4 id=&#34;4-directories&#34;&gt;&lt;strong&gt;4. DIRECTORIES&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;Next, we need to open our project directory (locally). There are many ways to do it.&lt;/p&gt;
&lt;p&gt;Using the CLI, you can move between folders with the &lt;code&gt;cd&lt;/code&gt; command. You can use tab to autocomplete your input in order to speed up the process:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/cdtabs.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;github repo - Navigating folders using CLI&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Navigating folders using CLI&lt;/p&gt;
&lt;p&gt;If you need to create a new folder, use the &lt;code&gt;mkdir foldername&lt;/code&gt; command&lt;/p&gt;
&lt;p&gt;You can also go to your folder using the explorer, and then open a console at the location with SHIFT+Right Click -&amp;gt; &lt;code&gt;Open Powershell Window Here&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now that we have our folder, let’s say /git/ for instance, you can add the file you want to push to GitHub in it. For now, let’s push the server file from the previous tutorial.&lt;/p&gt;
&lt;p&gt;First, make sure you are in the right directory in your terminal. Here’s where I’m at:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/beforegit.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;github repo - Preparing for the push&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Preparing for the push&lt;/p&gt;
&lt;h4 id=&#34;5-first-git-push&#34;&gt;&lt;strong&gt;5. FIRST GIT PUSH&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;A git push has several stages.  First, you add files to the commit. Then, you commit the changes.  Finally, it’s time to push the changes to the remote origin (the GitHub  repo).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To get started, let’s initialize our local repository (/git/ on my screenshot) as a Git repository: &lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now, we add the file we wants to push (server.py): &lt;code&gt;git add server.py &lt;/code&gt;&lt;em&gt;Note: you can add all files in your local repository with the following command: &lt;code&gt;git add .&lt;/code&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Then, we commit our changes. To easily keep track of our changes, try to be concise and descriptive in your message:&lt;code&gt;git commit -m &amp;quot;First server.py commit&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We’re now almost  ready to push, once we tell GitHub which repository we want to push our  files into. In GitBash language, that’s the ORIGIN:&lt;code&gt;git remote add origin https://github.com/Ahirice/sato&lt;/code&gt;
&lt;em&gt;Don’t forget to replace the origin URL with your own github repo.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;And verify it:&lt;code&gt;git remote -v &lt;/code&gt;&lt;em&gt;Your repository URL (&lt;a class=&#34;link&#34; href=&#34;https://github.com/Ahirice/sato&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Ahirice/sato&lt;/a&gt; for me here) is displayed at the top of the repository Quick Setup  page. If you repository is already published, the repo URL is the URL  you use to access it on GitHub.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Everything is set up, now it’s time to finally push: &lt;code&gt;git push origin master&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is the whole process in a GIF:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/gitpush.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;github repo - GitHub push GIF&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;GitHub push GIF&lt;/p&gt;
&lt;p&gt;Success! And here went the first push to our GitHub repo, feels good right?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/1out5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;*&lt;strong&gt;Step 1/5 – Hosting the code on a GitHub repo*&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;ii-preparing-for-heroku-required-files&#34;&gt;&lt;strong&gt;II/ PREPARING FOR HEROKU: REQUIRED FILES&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Before we deploy, we need to add  some files to our repository that Heroku requires. Moreover, we’ll have  to adjust our server.py script slightly to make it work on this new  configuration. Let’s start with the required files:&lt;/p&gt;
&lt;h4 id=&#34;1-requirementstxt&#34;&gt;&lt;strong&gt;1. REQUIREMENTS.TXT&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;During the first tutorial, we installed Requests and Flask using pip. For our remote server to work, &lt;strong&gt;it will need these two libraries&lt;/strong&gt;. This is precisely what the requirements.txt file is about.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Flask==0.12.2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;requests==2.18.4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Heroku will process the  requirements.txt and install any library listed here in the virtual  environment used to run your server. The whole process is automatic, you just need to make sure all your script requirements are listed here.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The state of the art process would have been to create a virtual environment  before we began any coding. Then, when deploying to Heroku, we would  have frozen our virtual environment requirements to populate our  requirements.txt file. For the sake of simplicity, we kept things a  little bit easier than they should be.&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-procfile&#34;&gt;&lt;strong&gt;2. PROCFILE&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;The procfile is a  text file that must be in the root directory of your application. It  states the command executed to start your app.&lt;/p&gt;
&lt;p&gt;During the first tutorial, we started our local server with &lt;code&gt;python server.py&lt;/code&gt;. Here, the command is almost the same. We just need to explicitly state  the process type (web) for Heroku, so here’s what we write in our  Procfile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;web: python server.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;3-appjson&#34;&gt;&lt;strong&gt;3. APP.JSON&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;The app.json file is used to  declare standard information about your application, including: name,  images, addons environment variables… &lt;a class=&#34;link&#34; href=&#34;https://devcenter.heroku.com/articles/app-json-schema&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Heroku offers a comprehensive resource &lt;/a&gt;explaining how this file is structured, we invite you to check it if you want to dig deeper.&lt;/p&gt;
&lt;p&gt;For now, we’ll just use a basic app.json:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;name&amp;#34;: &amp;#34;Sato crypto bot&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;description&amp;#34;: &amp;#34;The server side for Sato.&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;image&amp;#34;: &amp;#34;heroku/python&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;repository&amp;#34;: &amp;#34;https://github.com/Ahirice/sato&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;keywords&amp;#34;: [&amp;#34;python&amp;#34;, &amp;#34;flask&amp;#34; ],
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;addons&amp;#34;: [ &amp;#34;heroku-postgresql&amp;#34; ],
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;environments&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;test&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &amp;#34;scripts&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;test&amp;#34;: &amp;#34;server.py test&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Don’t forget to at least &lt;strong&gt;edit the repository key value to match your own GitHub repo&lt;/strong&gt;. The rest can stay the same.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/2out5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2/5 – Adding Heroku required files&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;iii-preparing-for-heroku-python-server-modifications&#34;&gt;&lt;strong&gt;III/ PREPARING FOR HEROKU: PYTHON SERVER MODIFICATIONS&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Our server file need slights adjustments to work on Heroku. You can find both files on the GitHub repo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;server.py&lt;/strong&gt; is the server script used on Heroku&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;server-self-run.py:&lt;/strong&gt; is the script we used in the first tutorial (and ran ourselves with ngrok)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Essentially, we just need to modify the port and the host of our app. Here’s how:&lt;/p&gt;
&lt;h4 id=&#34;1-switching-from-port-5000-to-a-port-defined-as-environment-variable&#34;&gt;&lt;strong&gt;1. SWITCHING FROM PORT 5000 TO A PORT DEFINED AS ENVIRONMENT VARIABLE&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;The first and the biggest change we have to do is to &lt;strong&gt;modify the port used by our webapp.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the first tutorial, we hardcoded the port in our script (&lt;code&gt;port = &amp;quot;5000&amp;quot;&lt;/code&gt; [line6 in server-self-run.py]). This time, &lt;strong&gt;we’ll need to define the port as an environment variable&lt;/strong&gt; (Heroku requirement). Hopefully, this is done in two simple steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, to access environment variables in Python, we’ll be using the &lt;code&gt;os.environ&lt;/code&gt; function . It means we must import os. [line 4 in server.py].&lt;/li&gt;
&lt;li&gt;Then, we need to adapt the line were we define the port: &lt;code&gt;os.environ[&amp;quot;PORT&amp;quot;]&lt;/code&gt; fetch the value of the environment variable named “PORT”: we’re almost there. Since &lt;strong&gt;ports are integers&lt;/strong&gt; (=whole number which can be positive, negative or null), we must ensure the port we fetch is indeed one.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/integers.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;github repo&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Testing the int() function&lt;/p&gt;
&lt;p&gt;To do so, we encapsulate our query in the &lt;code&gt;int()&lt;/code&gt; function. Therefore, our port is now defined as it follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;port = int(os.environ[&amp;#34;PATH&amp;#34;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note: Although  we have to import os in our script, it’s not needed in the  requirements.txt. Indeed, os is one of the base python library, such as &lt;a class=&#34;link&#34; href=&#34;https://docs.python.org/3/library/time.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;time&lt;/a&gt; or &lt;a class=&#34;link&#34; href=&#34;https://docs.python.org/3/library/sys.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;sys&lt;/a&gt;: these libraries are available as soon as Python is installed.&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-changing-the-host&#34;&gt;&lt;strong&gt;2. CHANGING THE HOST&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;There is one last change to do  before our server.py is ready. To expose our flask app to the internet  (so it can accepts connection from remote sources instead of just local  ones), &lt;a class=&#34;link&#34; href=&#34;http://flask.pocoo.org/docs/0.12/quickstart/#public-server&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;we must set its host as “0.0.0.0.”.&lt;/a&gt; We just need to change the very last line of our script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;app.run(port=port, host=&amp;#34;0.0.0.0&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;3-pushing-the-new-files-to-our-github-repo&#34;&gt;&lt;strong&gt;3. PUSHING THE NEW FILES TO OUR GITHUB REPO&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;During the last two steps, we modified server.py and created requirements.txt, procfile and app.json.&lt;/p&gt;
&lt;p&gt;Before we move forward with the fifth and last step of the tutorial, &lt;strong&gt;we need to push these changes to our repo&lt;/strong&gt;. Hopefully, we’re now familiar with GitHub’s process. If you have some  doubts about the process here, please refer to the first step of this  tutorial.&lt;/p&gt;
&lt;p&gt;Once we have the updated and newly created files on our GitHub repo, we are ready to deploy to Heroku.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/3out5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;*&lt;strong&gt;Step 3/5 – Adapting the server script for Heroku*&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;iv-githeroku&#34;&gt;&lt;strong&gt;IV/ GIT+HEROKU&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Now, that we’ve been through the  Git process, it’s time for some good news. Heroku offers an easy and  potent GitHub integration: once your connect the two accounts, &lt;strong&gt;new files pushed on the master repository on GitHub will be automatically deployed to Heroku&lt;/strong&gt; (unless you rather do it manually).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: If the  CLI grew on you, or you would rather not connect your Github and Heroku  accounts, Heroku also offers a CLI to deploy your servers. It won’t be  covered in this tutorial, so we recommend you check &lt;a class=&#34;link&#34; href=&#34;https://devcenter.heroku.com/articles/getting-started-with-python&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Heroku’s Getting Started&lt;/a&gt; guide if you want to do it this way.&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-deployment-on-heroku&#34;&gt;&lt;strong&gt;1. DEPLOYMENT ON HEROKU&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;The account creation process on  Heroku as it’s straightforward so we won’t detail it. Once you have you  account, create a new app, and connect to your GitHub account to deploy  it automatically. Just follow the GIF:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/herokudeploy.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;github repo - Deployment options on Heroku&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Deployment options on Heroku&lt;/p&gt;
&lt;p&gt;Once automatic deployment is active, every time you push to your GitHub repo, Heroku will deploy the new files to your server.&lt;/p&gt;
&lt;p&gt;If you would rather deploy  manually but still benefits from the convenience offered by the  GitHub&amp;lt;-&amp;gt;Heroku integration, you can use the Manual Deploy option  (click on the &lt;code&gt;Deploy Branch&lt;/code&gt; button). If you do so, remember to go back on Heroku and click this button every time you update your code. Here’s a GIF:&lt;/p&gt;
&lt;h4 id=&#34;2-connecting-your-heroku-app-to-sap-conversational-ai&#34;&gt;&lt;strong&gt;2. CONNECTING YOUR HEROKU APP TO SAP Conversational AI&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;Once your app is deployed on Heroku, the only thing left to do is to tell SAP Conversational AI where to find it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go on your app on Heroku, on the  settings tab, and scroll down to the Domain and Certificates section.  Under the domain entry, your app endpoint is displayed. Essentially,  it’s your app name (on Heroku) .herokuapp.com. Copy it.&lt;/li&gt;
&lt;li&gt;Now go back on SAP Conversational AI, in settings, and paste your Heroku app URL in the Bot Base URL field.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/4out5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Step 4/5 – Push deploy the new server on Heroku&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;v-test-and-debug&#34;&gt;&lt;strong&gt;V/ TEST AND DEBUG&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Now, before we go on Messenger to  test our bot, let’s access the logs. They’ll prove helpful if you don’t  get it working right the first time.&lt;/p&gt;
&lt;h4 id=&#34;1-accessing-herokus-logs&#34;&gt;&lt;strong&gt;1. ACCESSING HEROKU’S LOGS&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;You have two main ways of accessing Heroku’s logs:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;From Heroku website&lt;/strong&gt;: if you click on the More button, at the top left on Heroku, you can access your server logs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;From any terminal:&lt;/strong&gt; if you have installed &lt;a class=&#34;link&#34; href=&#34;https://devcenter.heroku.com/articles/heroku-cli&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Heroku CLI&lt;/a&gt; (available on Chocolatey of course), you can access your logs from any terminal.&lt;/p&gt;
&lt;p&gt;You can access the logs in real time with the following command:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mk0caiblog1h3pefaf7c.kinstacdn.com/wp-content/uploads/2017/12/commandsato.png&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/commandsato.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/5out5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;*&lt;strong&gt;Step 5/5 – Running the server script and accessing the logs*&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With access to the logs, we’ll have all we need to debug in case of a faulty script. Let’s have a look at the common issues:&lt;/p&gt;
&lt;h4 id=&#34;2-common-issues&#34;&gt;&lt;strong&gt;2. COMMON ISSUES:&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;TRAILING / IN BOT BASE URL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/2017/sato/301.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;github repo - Common issues, trailing /&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Errors raised by an extra trailing slash&lt;/p&gt;
&lt;p&gt;Since we set up the webhook our bot call as &lt;code&gt;/&lt;/code&gt;, we must make sure the the bot base URL address we pasted does not have an ending /: &lt;code&gt;https://flask-sato-server.herokuapp.com&lt;/code&gt;. Here on the screen, we have a trailing slash in the bot base URL, which leads to a POST request on &lt;code&gt;https://flask-sato-server.herokuapp.com//&lt;/code&gt; unable to be processed triggering a redirect (301) and method not allowed (405) errors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NO RESPONSE ON SERVER AND NGROK&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If nothing happens both on your  server and on ngrok, it means SAP Conversational AI can’t reach it. It’s most certainly due to a typo in the bot base URL, or the complete lack  of it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SLOW RESPONSE TIME&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Heroku put your app to sleep when they’ve been inactive for a while. Hence, the first user  who aks a crypto price after a long downtime might wait a while. You can upgrade your account to avoid this, or make another script to keep your bot server always up. It’s a great follow-up exercise.&lt;/p&gt;
&lt;p&gt;You’re very welcome to contact us if you need help, trough the comment section below or via &lt;a class=&#34;link&#34; href=&#34;https://slack.cai.tools.sap/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Slack&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
